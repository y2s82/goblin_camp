# Python tool. Replacement for boost-build/tools/python.jam.
#
# To configure:
#   using python
#       : <include>path-to-includes <library>path-to-libraries <name>... <debug>yes/no <exec>python
#   ;
#

import path ;
import os ;
import property-set ;
import project ;
import modules ;

rule init ( options * ) {
    modules.poke $(__name__) : .options : [ property-set.create $(options) ] ;
}

local rule create-project ( requirements * : usage-requirements * ) {
    # Common options
    if $(.options) {
        local inc = [ $(.options).get <include> ] ;
        local lib = [ $(.options).get <library> ] ;
        
        requirements       += <include>$(inc) <search>$(lib) ;
        usage-requirements += <include>$(inc) ;
    }
    
    project.push-current [ project.current ] ;
    project.initialize $(__name__) ;
    project $(__name__) : requirements $(requirements) : usage-requirements $(usage-requirements) ;
    
    define-targets ;
    
    project.pop-current ;
}

#################

# <interpreter>, <suffix> and <pydebug> are deprecated

rule use-project ( ) {
    local usage  = ;
    local interp = ;
    
    if $(.options) {
        interp  = [ $(.options).get <exec> ] ;
        interp ?= [ $(.options).get <interpreter> ] ;
        
        if [ $(.options).get <debug> ] = "yes" || [ $(.options).get <pydebug> ] = "on" {
            usage = <define>Py_DEBUG ;
        }
    }
    
    interp ?= python ;
    ECHO ** Using Python executable: $(interp) ;
    
    modules.poke : PYTHON : $(interp) ;
    
    create-project : $(usage) ;
}

local rule define-targets ( ) {
    if [ os.name ] = MACOSX {
        alias python : : : : <framework>Python ;
    } else {
        local name = ;
        
        if $(.options) {
            name = [ $(.options).get <name> ] ;
            local suffix = [ $(.options).get <suffix> ] ;
            
            if $(suffix) {
                name = $(name)$(suffix) ;
            }
        }
        
        name ?= python27 ;
        
        ECHO ** Using Python: $(name) ;
        lib python : : <name>$(name) ;
    }
}
