# zlib tool
#
# using zlib : <library>... <include>... <name>library-name ;

#################

import property-set ;
import project ;
import modules ;
import os ;

rule init ( options * ) {
    modules.poke $(__name__) : .options : [ property-set.create $(options) ] ;
}

local rule create-project ( requirements * : usage-requirements * ) {
    # Common options
    if $(.options) {
        local inc = [ $(.options).get <include> ] ;
        local lib = [ $(.options).get <library> ] ;
        
        requirements       += <include>$(inc) <search>$(lib) ;
        usage-requirements += <include>$(inc) ;
    }
    
    project.push-current [ project.current ] ;
    project.initialize $(__name__) ;
    project $(__name__) : requirements $(requirements) : usage-requirements $(usage-requirements) ;
    
    define-targets ;
    
    project.pop-current ;
}

#################

#################

rule use-project ( ) {
    create-project ;
}

local rule define-targets ( ) {
    local name = ;
    
    if $(.options) {
        name = [ $(.options).get <name> ] ;
    }
    
    if [ os.name ] = NT {
        name ?= zdll ;
    } else {
        name ?= z ;
    }
    
    ECHO ** Using zlib: $(name) ;
    lib zlib : : <name>$(name) ;
}
