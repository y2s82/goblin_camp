# OpenGL tool
#
# To configure:
#   using opengl : <include>path-to-includes <library>path-to-libraries <name>library ;
#
# NOTE: On Windows, configuration is ignored and GL target is an empty alias, since
# OpenGL is part of the Windows SDK (/winsdk//opengl32).

#################

import property-set ;
import project ;
import modules ;
import os ;

rule init ( options * ) {
    modules.poke $(__name__) : .options : [ property-set.create $(options) ] ;
}

local rule create-project ( requirements * : usage-requirements * ) {
    # Common options
    if $(.options) {
        local inc = [ $(.options).get <include> ] ;
        local lib = [ $(.options).get <library> ] ;
        
        requirements       += <include>$(inc) <search>$(lib) ;
        usage-requirements += <include>$(inc) ;
    }
    
    project.push-current [ project.current ] ;
    project.initialize $(__name__) ;
    project $(__name__) : requirements $(requirements) : usage-requirements $(usage-requirements) ;
    
    define-targets ;
    
    project.pop-current ;
}

#################

rule use-project ( ) {
    create-project ;
}

local rule define-targets ( ) {
    if [ os.name ] = LINUX {
        local name = ;
        
        if $(.options) {
            name = [ $(.options).get <name> ] ;
        }
        
        name ?= GL ;
        ECHO ** Using OpenGL: $(name) ;
        lib GL : : <name>$(name) <link>shared ;
    } else if [ os.name ] = MACOSX {
        alias GL : : : : <framework>OpenGL ;
    } else {
        alias GL ;
    }
}
